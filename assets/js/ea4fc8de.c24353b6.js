"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[86428],{53699:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>n,metadata:()=>r,toc:()=>d});var a=t(17624),s=t(4552);const n={id:"symbol-in-javascript",title:"Symbol Data Types in JavaScript",sidebar_label:"Symbol",sidebar_position:7,tags:["JavaScript","Data Types","Primitive Data Types","Symbol","Symbol in JavaScript","Symbol data type"],description:"What is the symbol data type in JavaScript? Learn about the symbol data type and how to create symbols in JavaScript."},o=void 0,r={id:"javascript/datatypes/primitive-data-types/symbol-in-javascript",title:"Symbol Data Types in JavaScript",description:"What is the symbol data type in JavaScript? Learn about the symbol data type and how to create symbols in JavaScript.",source:"@site/docs/javascript/datatypes/primitive-data-types/symbol-js.md",sourceDirName:"javascript/datatypes/primitive-data-types",slug:"/javascript/datatypes/primitive-data-types/symbol-in-javascript",permalink:"/docs/javascript/datatypes/primitive-data-types/symbol-in-javascript",draft:!1,unlisted:!1,editUrl:"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/datatypes/primitive-data-types/symbol-js.md",tags:[{label:"JavaScript",permalink:"/docs/tags/java-script"},{label:"Data Types",permalink:"/docs/tags/data-types"},{label:"Primitive Data Types",permalink:"/docs/tags/primitive-data-types"},{label:"Symbol",permalink:"/docs/tags/symbol"},{label:"Symbol in JavaScript",permalink:"/docs/tags/symbol-in-java-script"},{label:"Symbol data type",permalink:"/docs/tags/symbol-data-type"}],version:"current",lastUpdatedBy:"ajay-dhangar",lastUpdatedAt:1709121109e3,sidebarPosition:7,frontMatter:{id:"symbol-in-javascript",title:"Symbol Data Types in JavaScript",sidebar_label:"Symbol",sidebar_position:7,tags:["JavaScript","Data Types","Primitive Data Types","Symbol","Symbol in JavaScript","Symbol data type"],description:"What is the symbol data type in JavaScript? Learn about the symbol data type and how to create symbols in JavaScript."},sidebar:"tutorialSidebar",previous:{title:"BigInt",permalink:"/docs/javascript/datatypes/primitive-data-types/bigint-in-javascript"},next:{title:"Non Primitive Data Types",permalink:"/docs/category/non-primitive-data-types"}},l={},d=[{value:"What is Symbol in JavaScript?",id:"what-is-symbol-in-javascript",level:2},{value:"How to Create Symbols in JavaScript?",id:"how-to-create-symbols-in-javascript",level:2},{value:"Checking for Symbols in JavaScript",id:"checking-for-symbols-in-javascript",level:2},{value:"Symbol Descriptions",id:"symbol-descriptions",level:2},{value:"Unique Identifiers",id:"unique-identifiers",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const i={admonition:"admonition",code:"code",h2:"h2",mermaid:"mermaid",p:"p",pre:"pre",...(0,s.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.code,{children:"Symbol"})," is a primitive data type in JavaScript. It represents a unique and immutable value. It is used to create unique identifiers for object properties."]}),"\n",(0,a.jsx)(i.mermaid,{value:"graph LR;\n    A(Symbol)--\x3e|Represents a unique and immutable value| B(SymbolValue);"}),"\n",(0,a.jsx)(i.h2,{id:"what-is-symbol-in-javascript",children:"What is Symbol in JavaScript?"}),"\n",(0,a.jsxs)(i.p,{children:["In JavaScript, ",(0,a.jsx)(i.code,{children:"Symbol"})," is a primitive data type that represents a unique and immutable value. It is used to create unique identifiers for object properties."]}),"\n",(0,a.jsx)(i.h2,{id:"how-to-create-symbols-in-javascript",children:"How to Create Symbols in JavaScript?"}),"\n",(0,a.jsxs)(i.p,{children:["You can create ",(0,a.jsx)(i.code,{children:"Symbol"})," in JavaScript using the following syntax:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-js",metastring:'title="Creating Symbols in JavaScript"',children:"let id = Symbol('id');\n\nconsole.log(id); // Output: Symbol(id)\n"})}),"\n",(0,a.jsxs)(i.p,{children:["In the above example, the variable ",(0,a.jsx)(i.code,{children:"id"})," is assigned the value ",(0,a.jsx)(i.code,{children:"Symbol('id')"}),". The string ",(0,a.jsx)(i.code,{children:"'id'"})," is used as a description for the symbol, which can be useful for debugging."]}),"\n",(0,a.jsx)(i.h2,{id:"checking-for-symbols-in-javascript",children:"Checking for Symbols in JavaScript"}),"\n",(0,a.jsxs)(i.p,{children:["You can check if a variable is a ",(0,a.jsx)(i.code,{children:"Symbol"})," using the ",(0,a.jsx)(i.code,{children:"typeof"})," operator."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-js",metastring:'title="Checking for Symbols in JavaScript"',children:"let id = Symbol('id');\n\nconsole.log(typeof id); // Output: symbol\n"})}),"\n",(0,a.jsxs)(i.p,{children:["In the above example, the ",(0,a.jsx)(i.code,{children:"typeof"})," operator returns ",(0,a.jsx)(i.code,{children:"symbol"})," for the ",(0,a.jsx)(i.code,{children:"id"})," variable, indicating that it is a ",(0,a.jsx)(i.code,{children:"Symbol"}),"."]}),"\n",(0,a.jsx)(i.h2,{id:"symbol-descriptions",children:"Symbol Descriptions"}),"\n",(0,a.jsxs)(i.p,{children:["When creating a ",(0,a.jsx)(i.code,{children:"Symbol"}),", you can provide an optional description that can be used for debugging purposes."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-js",metastring:'title="Symbol Descriptions"',children:"let id = Symbol('id');\n\nconsole.log(id.description); // Output: id\n"})}),"\n",(0,a.jsxs)(i.p,{children:["In the above example, the ",(0,a.jsx)(i.code,{children:"description"})," property of the ",(0,a.jsx)(i.code,{children:"id"})," symbol returns the string ",(0,a.jsx)(i.code,{children:"'id'"}),", which was provided as a description when creating the symbol."]}),"\n",(0,a.jsx)(i.h2,{id:"unique-identifiers",children:"Unique Identifiers"}),"\n",(0,a.jsx)(i.p,{children:"Symbols are unique and immutable. Even if you create multiple symbols with the same description, they are different values."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-js",metastring:'title="Unique Identifiers"',children:"let id1 = Symbol('id');\n\nlet id2 = Symbol('id');\n\nconsole.log(id1 === id2); // Output: false\n"})}),"\n",(0,a.jsxs)(i.p,{children:["In the above example, ",(0,a.jsx)(i.code,{children:"id1"})," and ",(0,a.jsx)(i.code,{children:"id2"})," are both symbols with the same description, but they are different values."]}),"\n",(0,a.jsx)(i.admonition,{title:"\ud83d\udcddNote",type:"info",children:(0,a.jsxs)(i.p,{children:["The description of a ",(0,a.jsx)(i.code,{children:"Symbol"})," is not used in any operations. It is purely a human-readable label for debugging purposes."]})}),"\n",(0,a.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsxs)(i.p,{children:["In this tutorial, you learned about the ",(0,a.jsx)(i.code,{children:"Symbol"})," data type in JavaScript and how to create symbols. You also learned how to check for symbols and use symbol descriptions. Symbols are useful for creating unique identifiers for object properties and are often used in advanced JavaScript programming."]})]})}function p(e={}){const{wrapper:i}={...(0,s.M)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},4552:(e,i,t)=>{t.d(i,{I:()=>r,M:()=>o});var a=t(11504);const s={},n=a.createContext(s);function o(e){const i=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(n.Provider,{value:i},e.children)}}}]);