"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[91814],{65409:e=>{e.exports=JSON.parse('{"tag":{"label":"intermediate-level","permalink":"/courses/tags/intermediate-level","allTagsPath":"/courses/tags","count":11,"items":[{"id":"react-js/intermidiate-level/advanced-styling/lesson-2","title":"Advanced styling libraries (styled-components, tailwindcss, Material-UI) (Optional)","description":"Learn how to use advanced styling libraries like styled-components, tailwindcss, and Material-UI to style your React components. These libraries provide powerful tools and utilities for creating modern and responsive designs in your applications.","permalink":"/courses/react-js/intermidiate-level/advanced-styling/lesson-2"},{"id":"react-js/intermidiate-level/advanced-styling/lesson-3","title":"BEM naming convention for organized CSS classes","description":"Learn how to use the BEM (Block Element Modifier) naming convention to create organized and maintainable CSS classes in your React applications. BEM helps you structure your stylesheets by defining a clear naming convention for CSS classes, making it easier to understand and maintain your styles.","permalink":"/courses/react-js/intermidiate-level/advanced-styling/lesson-3"},{"id":"react-js/intermidiate-level/handling-data-flow/lesson-1","title":"Context API for managing global state without prop drilling (Optional)","description":"Learn how to use the Context API in React to manage global state without prop drilling. The Context API provides a way to pass data through the component tree without having to pass props down manually at every level. This lesson will introduce you to the Context API and show you how to use it to manage global state in your React applications.","permalink":"/courses/react-js/intermidiate-level/handling-data-flow/lesson-1"},{"id":"react-js/intermidiate-level/advanced-styling/lesson-1","title":"CSS Modules for component-scoped styling","description":"Learn how to use CSS Modules to create component-scoped styles in React applications. CSS Modules allow you to write modular and reusable styles for your components without worrying about global CSS conflicts.","permalink":"/courses/react-js/intermidiate-level/advanced-styling/lesson-1"},{"id":"react-js/intermidiate-level/working-with-apis/lesson-2","title":"Handling asynchronous operations (promises, async/await)","description":"Learn how to handle asynchronous operations in React using promises, async/await, and the useEffect hook. Asynchronous operations are common in web development, and React provides several ways to manage asynchronous code and update your application\'s state with the results.","permalink":"/courses/react-js/intermidiate-level/working-with-apis/lesson-2"},{"id":"react-js/intermidiate-level/handling-data-flow/lesson-2","title":"Introduction to Redux: Advanced state management for complex applications","description":"Learn how to use Redux for advanced state management in React applications. Redux is a predictable state container for JavaScript apps that helps you manage complex application state in a more organized and efficient way. This lesson will introduce you to the core concepts of Redux and show you how to integrate Redux into your React applications.","permalink":"/courses/react-js/intermidiate-level/handling-data-flow/lesson-2"},{"id":"react-js/intermidiate-level/routing-for-spas/lesson-1","title":"Introduction to routing concepts in React applications","description":"Learn how to implement client-side routing in React applications using the React Router library. Routing is an essential concept in web development that allows you to navigate between different pages or views in a single-page application (SPA). React Router provides a declarative way to define routes, handle navigation, and manage the application\'s UI based on the current URL.","permalink":"/courses/react-js/intermidiate-level/routing-for-spas/lesson-1"},{"id":"react-js/intermidiate-level/managing-complex-uis/lesson-1","title":"Lifting state up for shared state management across components","description":"Learn how to lift state up in React to manage shared state across multiple components. Lifting state up is a common pattern in React applications that allows you to share state between components and keep your application\'s data in sync.","permalink":"/courses/react-js/intermidiate-level/managing-complex-uis/lesson-1"},{"id":"react-js/intermidiate-level/working-with-apis/lesson-1","title":"Making API calls using fetch() or axios","description":"Learn how to make API calls in React using the fetch() method or the axios library. Making API calls is a common task in web development, and React provides several ways to fetch data from external APIs and update your application\'s state with the response.","permalink":"/courses/react-js/intermidiate-level/working-with-apis/lesson-1"},{"id":"react-js/intermidiate-level/working-with-apis/lesson-3","title":"Rendering fetched data from APIs","description":"Learn how to render data fetched from external APIs in React components. Rendering fetched data is a common task in web development, and React provides a way to update your application\'s UI with the data retrieved from API calls.","permalink":"/courses/react-js/intermidiate-level/working-with-apis/lesson-3"},{"id":"react-js/intermidiate-level/managing-complex-uis/lesson-2","title":"Understanding the challenges of prop drilling","description":"Learn about the challenges of prop drilling in React applications and how to avoid them using context, Redux, or other state management libraries. Prop drilling can lead to complex and hard-to-maintain code, especially in large applications with deeply nested components.","permalink":"/courses/react-js/intermidiate-level/managing-complex-uis/lesson-2"}],"unlisted":false}}')}}]);