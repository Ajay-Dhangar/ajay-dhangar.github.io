"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[57639],{35855:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=e(74848),a=e(28453);const r={id:"string-operator-in-javascript",title:"String Operator in JavaScript",sidebar_label:"String Operator",sidebar_position:5,tags:["JavaScript","Operators","String Operators","String Concatenation","Implicit Type Conversion","String Concatenation with Assignment","String Concatenation with Template Literals","Template Literals","ECMAScript 6","ES6","String Concatenation Operator","Assignment Operator","Template Literals","Implicit Type Conversion","Concatenation","String"],description:"What is the string operator in JavaScript? Learn about the types of string operators in JavaScript, including string concatenation operator, implicit type conversion, string concatenation with assignment, and string concatenation with template literals."},o=void 0,s={id:"javascript/operators/string-operator-in-javascript",title:"String Operator in JavaScript",description:"What is the string operator in JavaScript? Learn about the types of string operators in JavaScript, including string concatenation operator, implicit type conversion, string concatenation with assignment, and string concatenation with template literals.",source:"@site/docs/javascript/operators/string-operators-js.md",sourceDirName:"javascript/operators",slug:"/javascript/operators/string-operator-in-javascript",permalink:"/docs/javascript/operators/string-operator-in-javascript",draft:!1,unlisted:!1,editUrl:"https://github.com/Ajay-Dhangar/ajay-dhangar.github.io/edit/main/docs/javascript/operators/string-operators-js.md",tags:[{inline:!0,label:"JavaScript",permalink:"/docs/tags/java-script"},{inline:!0,label:"Operators",permalink:"/docs/tags/operators"},{inline:!0,label:"String Operators",permalink:"/docs/tags/string-operators"},{inline:!0,label:"String Concatenation",permalink:"/docs/tags/string-concatenation"},{inline:!0,label:"Implicit Type Conversion",permalink:"/docs/tags/implicit-type-conversion"},{inline:!0,label:"String Concatenation with Assignment",permalink:"/docs/tags/string-concatenation-with-assignment"},{inline:!0,label:"String Concatenation with Template Literals",permalink:"/docs/tags/string-concatenation-with-template-literals"},{inline:!0,label:"Template Literals",permalink:"/docs/tags/template-literals"},{inline:!0,label:"ECMAScript 6",permalink:"/docs/tags/ecma-script-6"},{inline:!0,label:"ES6",permalink:"/docs/tags/es-6"},{inline:!0,label:"String Concatenation Operator",permalink:"/docs/tags/string-concatenation-operator"},{inline:!0,label:"Assignment Operator",permalink:"/docs/tags/assignment-operator"},{inline:!0,label:"Template Literals",permalink:"/docs/tags/template-literals"},{inline:!0,label:"Implicit Type Conversion",permalink:"/docs/tags/implicit-type-conversion"},{inline:!0,label:"Concatenation",permalink:"/docs/tags/concatenation"},{inline:!0,label:"String",permalink:"/docs/tags/string"}],version:"current",lastUpdatedBy:"ajay-dhangar",lastUpdatedAt:1710387069e3,sidebarPosition:5,frontMatter:{id:"string-operator-in-javascript",title:"String Operator in JavaScript",sidebar_label:"String Operator",sidebar_position:5,tags:["JavaScript","Operators","String Operators","String Concatenation","Implicit Type Conversion","String Concatenation with Assignment","String Concatenation with Template Literals","Template Literals","ECMAScript 6","ES6","String Concatenation Operator","Assignment Operator","Template Literals","Implicit Type Conversion","Concatenation","String"],description:"What is the string operator in JavaScript? Learn about the types of string operators in JavaScript, including string concatenation operator, implicit type conversion, string concatenation with assignment, and string concatenation with template literals."},sidebar:"tutorialSidebar",previous:{title:"Comparison Operator",permalink:"/docs/javascript/operators/comparison-operator-in-javascript"},next:{title:"Logical Operator",permalink:"/docs/javascript/operators/logical-operator-in-javascript"}},l={},c=[{value:"Types of String Operator in JavaScript",id:"types-of-string-operator-in-javascript",level:2},{value:"String Concatenation Operator (+)",id:"string-concatenation-operator-",level:3},{value:"Implicit Type Conversion",id:"implicit-type-conversion",level:3},{value:"String Concatenation with Assignment",id:"string-concatenation-with-assignment",level:3},{value:"String Concatenation with Template Literals",id:"string-concatenation-with-template-literals",level:3},{value:"Conclusion",id:"conclusion",level:2}];function p(t){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",mermaid:"mermaid",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In JavaScript, the string operator (",(0,i.jsx)(n.code,{children:"+"}),") is used to concatenate two or more strings. It can also be used to concatenate a string with other data types by implicitly converting them to strings."]}),"\n",(0,i.jsx)(n.mermaid,{value:"---\ntitle: String Operator in JavaScript\n---\n\nclassDiagram\n    class StringOperation {\n        operand1\n        operand2\n        result\n        perform()\n    }\n\n    class StringConcatenationOperation {\n        perform(): (operand1 + operand2)\n    }\n\n    StringOperation <|-- StringConcatenationOperation"}),"\n",(0,i.jsx)(n.h2,{id:"types-of-string-operator-in-javascript",children:"Types of String Operator in JavaScript"}),"\n",(0,i.jsx)(n.p,{children:"The following are the types of string operators in JavaScript:"}),"\n",(0,i.jsx)(n.h3,{id:"string-concatenation-operator-",children:"String Concatenation Operator (+)"}),"\n",(0,i.jsxs)(n.p,{children:["The string concatenation operator (",(0,i.jsx)(n.code,{children:"+"}),") is used to concatenate two or more strings."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{3} title="String Concatenation Operator" showLineNumbers',children:'let str1 = "Hello";\nlet str2 = "World";\nconsole.log(str1 + " " + str2); // Output: Hello World\n'})}),"\n",(0,i.jsx)(n.h3,{id:"implicit-type-conversion",children:"Implicit Type Conversion"}),"\n",(0,i.jsxs)(n.p,{children:["The string operator (",(0,i.jsx)(n.code,{children:"+"}),") can also be used to concatenate a string with other data types by implicitly converting them to strings."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{3} title="Implicit Type Conversion" showLineNumbers',children:'let str = "Hello";\nlet num = 123;\nconsole.log(str + num); // Output: Hello123\n'})}),"\n",(0,i.jsx)(n.h3,{id:"string-concatenation-with-assignment",children:"String Concatenation with Assignment"}),"\n",(0,i.jsxs)(n.p,{children:["The string concatenation operator (",(0,i.jsx)(n.code,{children:"+"}),") can be combined with the assignment operator (",(0,i.jsx)(n.code,{children:"="}),") to concatenate and assign the result to a variable."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{2} title="String Concatenation with Assignment" showLineNumbers',children:'let str = "Hello";\nstr += " World";\nconsole.log(str); // Output: Hello World\n'})}),"\n",(0,i.jsx)(n.h3,{id:"string-concatenation-with-template-literals",children:"String Concatenation with Template Literals"}),"\n",(0,i.jsxs)(n.p,{children:["The string concatenation operator (",(0,i.jsx)(n.code,{children:"+"}),") can be replaced with template literals to concatenate strings in a more readable way."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{3} title="String Concatenation with Template Literals" showLineNumbers',children:'let str1 = "Hello";\nlet str2 = "World";\nconsole.log(`${str1} ${str2}`); // Output: Hello World\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the ",(0,i.jsx)(n.code,{children:"${}"})," syntax is used to embed expressions within the string. The expressions are evaluated and concatenated with the surrounding string."]}),"\n",(0,i.jsxs)(n.p,{children:["In the above examples, the string concatenation operator (",(0,i.jsx)(n.code,{children:"+"}),") is used to concatenate two strings, implicitly convert a number to a string, concatenate and assign the result to a variable, and concatenate strings using template literals."]}),"\n",(0,i.jsxs)(n.admonition,{title:"\ud83d\udcdd Note",type:"info",children:[(0,i.jsxs)(n.p,{children:["The string concatenation operator (",(0,i.jsx)(n.code,{children:"+"}),") can also be used to concatenate strings with other data types, such as numbers, booleans, and objects, by implicitly converting them to strings."]}),(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:'console.log("Hello" + 123);'})," will output ",(0,i.jsx)(n.code,{children:"Hello123"}),"."]}),(0,i.jsxs)(n.p,{children:["String template literals can also be used to concatenate strings in a more readable way. For example, ",(0,i.jsxs)("code",{children:["console.log(`",(0,i.jsx)(n.code,{children:'${"Hello"} ${"World"}'}),"`);"]})," will output ",(0,i.jsx)(n.code,{children:"Hello World"}),". It is intruduced in ECMAScript 6 (ES6)."]}),(0,i.jsxs)(n.p,{children:["When using template literals, expressions within ",(0,i.jsxs)("code",{children:["`",(0,i.jsx)(n.code,{children:"${}"}),"`"]})," are evaluated and concatenated with the surrounding string."]})]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["The string operator (",(0,i.jsx)(n.code,{children:"+"}),") is used to concatenate two or more strings. It can also be used to concatenate a string with other data types by implicitly converting them to strings. It can be combined with the assignment operator (",(0,i.jsx)(n.code,{children:"="}),") to concatenate and assign the result to a variable. It can also be replaced with template literals to concatenate strings in a more readable way."]})]})}function d(t={}){const{wrapper:n}={...(0,a.R)(),...t.components};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(p,{...t})}):p(t)}},28453:(t,n,e)=>{e.d(n,{R:()=>o,x:()=>s});var i=e(96540);const a={},r=i.createContext(a);function o(t){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function s(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:o(t.components),i.createElement(r.Provider,{value:n},t.children)}}}]);