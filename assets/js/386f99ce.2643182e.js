"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[67612],{56056:e=>{e.exports=JSON.parse('{"tag":{"label":"state-management","permalink":"/courses/tags/state-management","allTagsPath":"/courses/tags","count":8,"items":[{"id":"react-js/intermidiate-level/handling-data-flow/lesson-1","title":"Context API for managing global state without prop drilling (Optional)","description":"Learn how to use the Context API in React to manage global state without prop drilling. The Context API provides a way to pass data through the component tree without having to pass props down manually at every level. This lesson will introduce you to the Context API and show you how to use it to manage global state in your React applications.","permalink":"/courses/react-js/intermidiate-level/handling-data-flow/lesson-1"},{"id":"react-js/begginer-level/introduction-to-forms/lesson-1","title":"Creating controlled components to manage form data with state","description":"learn how to create controlled components in React to manage form data using state. Controlled components allow you to handle form inputs and manage their state, enabling you to control and validate user input in React applications.","permalink":"/courses/react-js/begginer-level/introduction-to-forms/lesson-1"},{"id":"react-js/begginer-level/introduction-to-forms/lesson-2","title":"Handling form submissions (sending data or local processing)","description":"learn how to handle form submissions in React applications. Handling form submissions involves sending form data to a server or processing it locally within the application. In this lesson, we will explore how to handle form submissions in React using event handlers and state management.","permalink":"/courses/react-js/begginer-level/introduction-to-forms/lesson-2"},{"id":"react-js/intermidiate-level/handling-data-flow/lesson-2","title":"Introduction to Redux: Advanced state management for complex applications","description":"Learn how to use Redux for advanced state management in React applications. Redux is a predictable state container for JavaScript apps that helps you manage complex application state in a more organized and efficient way. This lesson will introduce you to the core concepts of Redux and show you how to integrate Redux into your React applications.","permalink":"/courses/react-js/intermidiate-level/handling-data-flow/lesson-2"},{"id":"react-js/intermidiate-level/managing-complex-uis/lesson-1","title":"Lifting state up for shared state management across components","description":"Learn how to lift state up in React to manage shared state across multiple components. Lifting state up is a common pattern in React applications that allows you to share state between components and keep your application\'s data in sync.","permalink":"/courses/react-js/intermidiate-level/managing-complex-uis/lesson-1"},{"id":"react-js/intermidiate-level/working-with-apis/lesson-1","title":"Making API calls using fetch() or axios","description":"Learn how to make API calls in React using the fetch() method or the axios library. Making API calls is a common task in web development, and React provides several ways to fetch data from external APIs and update your application\'s state with the response.","permalink":"/courses/react-js/intermidiate-level/working-with-apis/lesson-1"},{"id":"react-js/intermidiate-level/working-with-apis/lesson-3","title":"Rendering fetched data from APIs","description":"Learn how to render data fetched from external APIs in React components. Rendering fetched data is a common task in web development, and React provides a way to update your application\'s UI with the data retrieved from API calls.","permalink":"/courses/react-js/intermidiate-level/working-with-apis/lesson-3"},{"id":"react-js/intermidiate-level/managing-complex-uis/lesson-2","title":"Understanding the challenges of prop drilling","description":"Learn about the challenges of prop drilling in React applications and how to avoid them using context, Redux, or other state management libraries. Prop drilling can lead to complex and hard-to-maintain code, especially in large applications with deeply nested components.","permalink":"/courses/react-js/intermidiate-level/managing-complex-uis/lesson-2"}],"unlisted":false}}')}}]);